.buttons {
    display: flex;
    gap: $gap-xlarge;
}
.close {
    &:hover {
      filter: brightness(1.5);
    }
  }
.btn {
    position: relative;
    display: inline-flex;
    align-items: center;
    cursor: pointer;
    font-size: 0.9em;
    font-weight: 600;
    color: $red;
    transition: $transition;
    border: none;
    &.icon {
      padding: 21px;
      // border: 1px solid $grey;
      @include flex-center;
      border-radius: $btn-radius;
      background: $white;
    }
    // arrows that are to the right of text on all buttons
    .btn-arrow {
      position: relative;
      bottom: -1px;
      right: -10px;
      display: inline-block;
      width: 16px;
      height: 14px;
      background-size: contain;
      background-repeat: no-repeat;
      overflow: hidden;
      svg {
        position: absolute;
        transition: $transition;
        &:first-of-type {
            @include transform(
                translate3d(0, 0, 0)
            );
        }
        &:last-of-type {
            @include transform(
                translate3d(-115%, 0, 0)
            );
        }
        * {
          stroke: $white;
        }
        &.red-arrow * {
          stroke: $red;
        }
        &.white-arrow * {
          stroke: $white;
        }
        &.black-arrow * {
          stroke: $black;
        }
      }
    }
    &:hover {
      svg {
        &:first-of-type {
          @include transform(
                translate3d(115%, 0, 0)
            );
        }
        &:last-of-type {
          @include transform(
                translate3d(0, 0, 0)
            );
        }
      }
    }
  }

  // arrows that are used for carousels
  .arrows {
    display: flex;
    .arrow-prev {
      border-radius: $btn-radius 0 0 $btn-radius;
    }
    .arrow-next {
      border-radius: 0 $btn-radius $btn-radius 0;
    }
  }
  .arrow {
    .btn-arrow {
        right: unset;
        bottom: unset;
    }
    &.dark {
      background-color: $white;
      svg {
        fill: $red;
      }
    }
    &.arrow-prev svg {
        &:first-of-type {
            @include transform(
                translate3d(-8px, 0, 0),
                rotate(180deg)
            );
        }
        &:last-of-type {
            @include transform(
                translate3d(calc(115% + 8px), 0, 0),
                rotate(180deg)
            );
        }
    }
    &.arrow-next svg {
        &:first-of-type {
            @include transform(
                translate3d(-8px, 0, 0)
            );
        }
        &:last-of-type {
            @include transform(
                translate3d(calc(-115% - 8px), 0, 0)
            );
        }
    }
    &:hover {
        &.arrow-prev svg {
            &:first-of-type {
                @include transform(
                    translate3d(calc(-115% - 8px), 0, 0),
                    rotate(180deg)
                );
            }
            &:last-of-type {
                @include transform(
                    translate3d(-8px, 0, 0),
                    rotate(180deg)
                );
            }
        }
        &.arrow-next svg {
            &:first-of-type {
                @include transform(
                    translate3d(calc(115% + 8px), 0, 0)
                );
            }
            &:last-of-type {
                @include transform(
                    translate3d(-8px, 0, 0)
                );
            }
        }
    }
    // &:not(.disabled):hover {
    //   &.arrow-prev svg {
    //     @include transform(
    //         translate3d(-8px, 0, 0),
    //         !important
    //     );
    //   }
    //   &.arrow-next svg {
    //     @include transform(
    //         translate3d(-8px, 0, 0),
    //         !important
    //     );
    //   }
    // }
  }